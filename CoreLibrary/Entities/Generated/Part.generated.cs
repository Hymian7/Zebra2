//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v1.3.0.12
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Zebra.Library
{
   /// <summary>
   /// Represents a Part Entity
   /// </summary>
   public partial class Part: ITimestamps
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Part()
      {
         Sheet = new System.Collections.Generic.List<global::Zebra.Library.Sheet>();

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="name">Name of the Part</param>
      public Part(string name)
      {
         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         this.Sheet = new System.Collections.Generic.List<global::Zebra.Library.Sheet>();

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="name">Name of the Part</param>
      public static Part Create(string name)
      {
         return new Part(name);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// ID of the Part Entity
      /// </summary>
      [Key]
      [Required]
      public int PartID { get; protected set; }

      /// <summary>
      /// Backing field for Name
      /// </summary>
      protected string _Name;
      /// <summary>
      /// When provided in a partial class, allows value of Name to be changed before setting.
      /// </summary>
      partial void SetName(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Name to be changed before returning.
      /// </summary>
      partial void GetName(ref string result);

      /// <summary>
      /// Required, Max length = 35
      /// Name of the Part
      /// </summary>
      [Required]
      [MaxLength(35)]
      [StringLength(35)]
      public string Name
      {
         get
         {
            string value = _Name;
            GetName(ref value);
            return (_Name = value);
         }
         set
         {
            string oldValue = _Name;
            SetName(oldValue, ref value);
            if (oldValue != value)
            {
               _Name = value;
            }
         }
      }

      /// <summary>
      /// Backing field for Position
      /// </summary>
      protected short? _Position;
      /// <summary>
      /// When provided in a partial class, allows value of Position to be changed before setting.
      /// </summary>
      partial void SetPosition(short? oldValue, ref short? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Position to be changed before returning.
      /// </summary>
      partial void GetPosition(ref short? result);

      /// <summary>
      /// Integer Value to order the Parts
      /// </summary>
      public short? Position
      {
         get
         {
            short? value = _Position;
            GetPosition(ref value);
            return (_Position = value);
         }
         set
         {
            short? oldValue = _Position;
            SetPosition(oldValue, ref value);
            if (oldValue != value)
            {
               _Position = value;
            }
         }
      }

      /// <summary>
      /// DateTime of Entity Creation
      /// </summary>
      public DateTime? CreationDate { get; set; }

      /// <summary>
      /// DateTime of Last Update
      /// </summary>
      public DateTime? LastUpdate { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// One Part can have many Sheets
      /// </summary>
      public virtual ICollection<global::Zebra.Library.Sheet> Sheet { get; protected set; }

   }
}

