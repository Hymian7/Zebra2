//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v1.3.0.12
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Zebra.StandardLibrary
{
   /// <summary>
   /// Model of the Zebra Database
   /// </summary>
   public partial class ZebraContext : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets

      /// <summary>
      /// Repository for global::Zebra.StandardLibrary.Part - Represents a Part Entity
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Zebra.StandardLibrary.Part> Part { get; set; }

      /// <summary>
      /// Repository for global::Zebra.StandardLibrary.Piece - Represents a Piece Entity
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Zebra.StandardLibrary.Piece> Piece { get; set; }

      /// <summary>
      /// Repository for global::Zebra.StandardLibrary.Setlist - Represents a Setlist Entity
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Zebra.StandardLibrary.Setlist> Setlist { get; set; }

      /// <summary>
      /// Repository for global::Zebra.StandardLibrary.SetlistItem - Helper Entity to model the N:M
      /// relationship between Setlist and Piece
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Zebra.StandardLibrary.SetlistItem> SetlistItem { get; set; }

      /// <summary>
      /// Repository for global::Zebra.StandardLibrary.Sheet - Represents a Sheet Entity
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Zebra.StandardLibrary.Sheet> Sheet { get; set; }
      #endregion DbSets

      /// <inheritdoc />
      public ZebraContext(DbContextOptions<ZebraContext> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Zebra.StandardLibrary.Part>()
                     .ToTable("Part")
                     .HasKey(t => t.PartID);
         modelBuilder.Entity<global::Zebra.StandardLibrary.Part>()
                     .Property(t => t.PartID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Zebra.StandardLibrary.Part>()
                     .Property(t => t.Name)
                     .HasMaxLength(35)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);

         modelBuilder.Entity<global::Zebra.StandardLibrary.Piece>()
                     .ToTable("Piece")
                     .HasKey(t => t.PieceID);
         modelBuilder.Entity<global::Zebra.StandardLibrary.Piece>()
                     .Property(t => t.PieceID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Zebra.StandardLibrary.Piece>()
                     .Property(t => t.Name)
                     .HasMaxLength(35)
                     .IsRequired()
                     .HasField("_Name")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);
         modelBuilder.Entity<global::Zebra.StandardLibrary.Piece>()
                     .Property(t => t.Arranger)
                     .HasMaxLength(35)
                     .HasField("_Arranger")
                     .UsePropertyAccessMode(PropertyAccessMode.Property);

         modelBuilder.Entity<global::Zebra.StandardLibrary.Setlist>()
                     .ToTable("Setlist")
                     .HasKey(t => t.SetlistID);
         modelBuilder.Entity<global::Zebra.StandardLibrary.Setlist>()
                     .Property(t => t.SetlistID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<global::Zebra.StandardLibrary.SetlistItem>()
                     .ToTable("SetlistItem")
                     .HasKey(t => t.SetlistItemID);
         modelBuilder.Entity<global::Zebra.StandardLibrary.SetlistItem>()
                     .Property(t => t.SetlistItemID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Zebra.StandardLibrary.SetlistItem>()
                     .HasOne(x => x.Piece)
                     .WithMany(x => x.SetlistItem)
                     .HasForeignKey("Piece_Id");
         modelBuilder.Entity<global::Zebra.StandardLibrary.SetlistItem>()
                     .HasOne(x => x.Setlist)
                     .WithMany(x => x.SetlistItem)
                     .HasForeignKey("Setlist_Id");

         modelBuilder.Entity<global::Zebra.StandardLibrary.Sheet>()
                     .ToTable("Sheet")
                     .HasKey(t => t.SheetID);
         modelBuilder.Entity<global::Zebra.StandardLibrary.Sheet>()
                     .Property(t => t.SheetID)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Zebra.StandardLibrary.Sheet>()
                     .HasOne(x => x.Part)
                     .WithMany(x => x.Sheet)
                     .HasForeignKey("Part_Id");
         modelBuilder.Entity<global::Zebra.StandardLibrary.Sheet>()
                     .HasOne(x => x.Piece)
                     .WithMany(x => x.Sheet)
                     .HasForeignKey("Piece_Id");

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
